// This file is auto-generated by @hey-api/openapi-ts

export const CreateRecruitmentRequestSchema = {
    required: ['content', 'duration', 'interval', 'method', 'positionGroup', 'processType', 'purpose', 'title', 'type'],
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['STURY', 'PROJECT', 'NETWORKING']
        },
        title: {
            type: 'string'
        },
        content: {
            type: 'string'
        },
        purpose: {
            type: 'string',
            enum: ['INCOME_STARTUP', 'PORTFOLIO', 'ETC']
        },
        method: {
            '$ref': '#/components/schemas/Method'
        },
        processType: {
            type: 'string',
            enum: ['ONLINE', 'OFFLINE', 'BOTH']
        },
        endedAt: {
            type: 'string',
            format: 'date-time'
        },
        duration: {
            type: 'string'
        },
        interval: {
            '$ref': '#/components/schemas/Interval'
        },
        positionGroup: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PositionGroup'
            }
        }
    }
} as const;

export const IntervalSchema = {
    required: ['frequency', 'type'],
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['WEEKLY', 'MONTHLY', 'TO_BE_DISCUSSED']
        },
        frequency: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const MethodSchema = {
    required: ['contact', 'type'],
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['OPEN_CHAT', 'GOOGLE_FORM', 'EMAIL']
        },
        contact: {
            type: 'string'
        }
    }
} as const;

export const PositionGroupSchema = {
    required: ['count', 'positions', 'skills'],
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            format: 'int32'
        },
        positions: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        skills: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        }
    }
} as const;

export const CreateRecruitmentResponseSchema = {
    required: ['recruitmentId'],
    type: 'object',
    properties: {
        recruitmentId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const SignUpRequestSchema = {
    required: ['code', 'provider'],
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        provider: {
            type: 'string',
            enum: ['GOOGLE', 'KAKAO']
        },
        redirectUri: {
            type: 'string'
        }
    }
} as const;

export const PositionSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const SkillSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const StaticResponseSchema = {
    required: ['positions', 'skills'],
    type: 'object',
    properties: {
        positions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Position'
            }
        },
        skills: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Skill'
            }
        }
    }
} as const;

export const PositionIdSchema = {
    required: ['value'],
    type: 'object',
    properties: {
        value: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const SearchRecruitmentRequestSchema = {
    required: ['keyword', 'positionIds', 'skillIds', 'type'],
    type: 'object',
    properties: {
        type: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['STURY', 'PROJECT', 'NETWORKING']
            }
        },
        keyword: {
            type: 'string'
        },
        positionIds: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PositionId'
            }
        },
        skillIds: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SkillId'
            }
        }
    }
} as const;

export const SkillIdSchema = {
    required: ['value'],
    type: 'object',
    properties: {
        value: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const PageableSchema = {
    type: 'object',
    properties: {
        page: {
            minimum: 0,
            type: 'integer',
            format: 'int32'
        },
        size: {
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        sort: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const PageSearchRecruitmentDtoSchema = {
    type: 'object',
    properties: {
        totalElements: {
            type: 'integer',
            format: 'int64'
        },
        totalPages: {
            type: 'integer',
            format: 'int32'
        },
        first: {
            type: 'boolean'
        },
        last: {
            type: 'boolean'
        },
        pageable: {
            '$ref': '#/components/schemas/PageableObject'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        content: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SearchRecruitmentDto'
            }
        },
        number: {
            type: 'integer',
            format: 'int32'
        },
        sort: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SortObject'
            }
        },
        numberOfElements: {
            type: 'integer',
            format: 'int32'
        },
        empty: {
            type: 'boolean'
        }
    }
} as const;

export const PageableObjectSchema = {
    type: 'object',
    properties: {
        paged: {
            type: 'boolean'
        },
        pageNumber: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        },
        unpaged: {
            type: 'boolean'
        },
        offset: {
            type: 'integer',
            format: 'int64'
        },
        sort: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SortObject'
            }
        }
    }
} as const;

export const SearchRecruitmentDtoSchema = {
    required: ['author', 'createdAt', 'id', 'positions', 'title', 'totalCapacity', 'type', 'viewCount'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        type: {
            type: 'string',
            enum: ['STURY', 'PROJECT', 'NETWORKING']
        },
        title: {
            type: 'string'
        },
        endedAt: {
            type: 'string',
            format: 'date-time'
        },
        positions: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        author: {
            type: 'string'
        },
        viewCount: {
            type: 'integer',
            format: 'int64'
        },
        totalCapacity: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const SortObjectSchema = {
    type: 'object',
    properties: {
        direction: {
            type: 'string'
        },
        nullHandling: {
            type: 'string'
        },
        ascending: {
            type: 'boolean'
        },
        property: {
            type: 'string'
        },
        ignoreCase: {
            type: 'boolean'
        }
    }
} as const;